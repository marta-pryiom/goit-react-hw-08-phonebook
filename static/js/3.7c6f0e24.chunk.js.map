{"version":3,"sources":["Component/ContactForm/ContactForm.module.css","Component/ContactList/ContactList.module.css","Component/Filter/Filter.module.css","Component/ContactForm/ContactForm.js","redux/contacts/selectors.js","Component/ContactList/ContactList.js","Component/Filter/Filter.js","pages/Contacts/Contacts.js"],"names":["module","exports","ContactForm","dispatch","useDispatch","useState","name","setName","number","setNumber","handleChange","e","target","value","reset","className","s","Box","Form","onSubmit","preventDefault","submit","Label","Input","type","placeholder","pattern","title","required","autoComplete","onChange","Btn","disabled","length","filterValue","state","contacts","filter","getVisibleContact","createSelector","items","normalizedFilter","toLowerCase","includes","ContactList","useSelector","console","log","useEffect","fetchContacts","map","phone","id","ContactItem","Text","onClick","deleteContact","Filter","FilterTitle","filteredContacts","currentTarget","Contacts"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,IAAM,yBAAyB,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,2BAA2B,IAAM,2B,mBCA9JD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,YAAc,iCAAiC,KAAO,4B,mBCAvHD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,YAAc,4BAA4B,MAAQ,wB,0IC8ErFC,MAzEf,WACI,IAAMC,EAAWC,cACjB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAQMC,EAAe,SAAAC,GACjB,MAAwBA,EAAEC,OAAlBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MACd,OAAQP,GACJ,IAAK,OACDC,EAAQM,GACR,MACJ,IAAK,SACDJ,EAAUI,GACV,MACJ,QACI,SAINC,EAAQ,WACVP,EAAQ,IACRE,EAAU,KAGd,OACI,qBAAKM,UAAWC,IAAEC,IAAlB,SACI,uBAAMF,UAAWC,IAAEE,KAAMC,SA3BZ,SAAAR,GACjBA,EAAES,iBACFjB,EAASkB,YAAO,CAAEf,OAAME,YACxBM,KAwBI,UACI,wBAAOC,UAAWC,IAAEM,MAApB,iBAEI,uBACIP,UAAWC,IAAEO,MACbV,MAAOP,EACPkB,KAAK,OACLlB,KAAK,OACLmB,YAAY,aACZC,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,aAAa,OACbC,SAAUpB,OAIlB,wBAAOK,UAAWC,IAAEM,MAApB,mBAEI,uBACIP,UAAWC,IAAEO,MACbC,KAAK,MACLX,MAAOL,EACPF,KAAK,SACLmB,YAAY,eACZC,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,aAAa,OACbC,SAAUpB,OAIlB,wBAAQK,UAAWC,IAAEe,IAAKC,SAA0B,IAAhB1B,EAAK2B,OAAzC,+B,yBCpEHC,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,QAGtCC,EAAoBC,YAC7B,CAACL,EAHsB,SAAAC,GAAK,OAAIA,EAAMC,SAASI,SAI/C,SAACH,EAAQG,GACL,IAAIC,EAAmBJ,EAAOK,cAC9B,OAAOF,EAAMH,QAAO,qBAAG/B,KACdoC,cAAcC,SAASF,SCoBzBG,MAzBf,WACI,IAAMR,EAAWS,YAAYP,GAC7BQ,QAAQC,IAAIX,GACZ,IAAMjC,EAAWC,cAIjB,OAHA4C,qBAAU,WACN7C,EAAS8C,iBACV,CAAC9C,IAEA,oBAAIY,UAAWC,IAAE4B,YAAjB,SACKR,EAASc,KAAI,gBAAG5C,EAAH,EAAGA,KAAME,EAAT,EAASA,OAAQ2C,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,GAAxB,OACV,qBAAaA,GAAIpC,IAAEqC,YAAnB,UACI,mBAAGtC,UAAWC,IAAEsC,KAAhB,SAAuBhD,IACvB,mBAAGS,UAAWC,IAAEsC,KAAhB,SAAuB9C,GAAU2C,IACjC,wBACI3B,KAAK,SACL+B,QAAS,kBAAMpD,EAASqD,YAAcJ,KAF1C,sBAHKA,S,yBCWVK,MAtBf,WACI,IAAM5C,EAAQgC,YAAYX,GACpB/B,EAAWC,cAIjB,OACI,qBAAKW,UAAWC,IAAEyC,OAAlB,SACI,wBAAO1C,UAAWC,IAAE0C,YAApB,kCAEI,uBACI3C,UAAWC,IAAEO,MACbC,KAAK,OACLlB,KAAK,OACLO,MAAOA,EACPiB,SAZC,SAAAnB,GACbR,EAASwD,YAAiBhD,EAAEiD,cAAc/C,iBCGnCgD,MATf,WACI,OACI,qCACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD","file":"static/js/3.7c6f0e24.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Box\":\"ContactForm_Box__2GjH2\",\"Form\":\"ContactForm_Form__2U9VD\",\"Label\":\"ContactForm_Label__3vIMh\",\"Input\":\"ContactForm_Input__30Cs4\",\"Btn\":\"ContactForm_Btn__2EJgS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__QWscR\",\"ContactItem\":\"ContactList_ContactItem__2fkLM\",\"Text\":\"ContactList_Text__ckgyX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filter_Filter__19QEr\",\"FilterTitle\":\"Filter_FilterTitle__2MdSY\",\"Input\":\"Filter_Input__2bL1s\"};","import { useState } from 'react';\r\nimport { submit } from '../../redux/contacts/operations';\r\n\r\nimport s from './ContactForm.module.css';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nfunction ContactForm() {\r\n    const dispatch = useDispatch();\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        dispatch(submit({ name, number }));\r\n        reset();\r\n    };\r\n\r\n    const handleChange = e => {\r\n        const { name, value } = e.target;\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const reset = () => {\r\n        setName('');\r\n        setNumber('');\r\n    };\r\n\r\n    return (\r\n        <div className={s.Box}>\r\n            <form className={s.Form} onSubmit={handleSubmit}>\r\n                <label className={s.Label}>\r\n                    Name\r\n                    <input\r\n                        className={s.Input}\r\n                        value={name}\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        placeholder=\"Enter name\"\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                        autoComplete=\"true\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </label>\r\n\r\n                <label className={s.Label}>\r\n                    Number\r\n                    <input\r\n                        className={s.Input}\r\n                        type=\"tel\"\r\n                        value={number}\r\n                        name=\"number\"\r\n                        placeholder=\"Enter number\"\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        required\r\n                        autoComplete=\"true\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </label>\r\n\r\n                <button className={s.Btn} disabled={name.length === 0}>\r\n                    Add contact\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactForm;\r\n","// import { createSelector } from 'reselect';\r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const filterValue = state => state.contacts.filter;\r\nexport const getContacts = state => state.contacts.items;\r\n\r\nexport const getVisibleContact = createSelector(\r\n    [filterValue, getContacts],\r\n    (filter, items) => {\r\n        let normalizedFilter = filter.toLowerCase();\r\n        return items.filter(({ name }) =>\r\n            name.toLowerCase().includes(normalizedFilter),\r\n        );\r\n    },\r\n);\r\n","import s from './ContactList.module.css';\r\nimport { deleteContact, fetchContacts } from '../../redux/contacts/operations';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getVisibleContact } from '../../redux/contacts/selectors';\r\nimport { useEffect } from 'react';\r\n\r\nfunction ContactList() {\r\n    const contacts = useSelector(getVisibleContact);\r\n    console.log(contacts);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(fetchContacts());\r\n    }, [dispatch]);\r\n    return (\r\n        <ul className={s.ContactList}>\r\n            {contacts.map(({ name, number, phone, id }) => (\r\n                <li key={id} id={s.ContactItem}>\r\n                    <p className={s.Text}>{name}</p>\r\n                    <p className={s.Text}>{number || phone}</p>\r\n                    <button\r\n                        type=\"button\"\r\n                        onClick={() => dispatch(deleteContact(id))}\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default ContactList;\r\n","import s from './Filter.module.css';\r\nimport { filteredContacts } from '../../redux/contacts/actions';\r\nimport { filterValue } from '../../redux/contacts/selectors';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nfunction Filter() {\r\n    const value = useSelector(filterValue);\r\n    const dispatch = useDispatch();\r\n    const onChange = e => {\r\n        dispatch(filteredContacts(e.currentTarget.value));\r\n    };\r\n    return (\r\n        <div className={s.Filter}>\r\n            <label className={s.FilterTitle}>\r\n                Find contacts by name\r\n                <input\r\n                    className={s.Input}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={value}\r\n                    onChange={onChange}\r\n                />\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Filter;\r\n","import ContactForm from '../../Component/ContactForm';\r\nimport ContactList from '../../Component/ContactList';\r\nimport Filter from '../../Component/Filter';\r\nfunction Contacts() {\r\n    return (\r\n        <>\r\n            <ContactForm />\r\n            <Filter />\r\n            <ContactList />\r\n        </>\r\n    );\r\n}\r\nexport default Contacts;\r\n"],"sourceRoot":""}